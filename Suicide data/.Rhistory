q()
a = 1
a=2
b=3
c=a+b
library()
library
search()
install.packages()
install.packages("MASS")
install.packages("MASS")
require("MASS")
library(MASS, lib.loc = "C:/Program Files/R/R-4.1.2/library")
detach("package:MASS", unload = TRUE)
library(MASS, lib.loc = "C:/Program Files/R/R-4.1.2/library")
x <- 1
y <- 2
z <- 3
x+z
x
y
z
x <- y
x
15 -> r
r
assign("x", 25)
x
num <- 10
string <- "Hello world"
boolean <- TRUE
n
class(num)
class(string)
class(boolean)
is.numeric(num)
is.boolean(string)
is .character(boolean)
is.character(boolean)
is.character(string)
as.character(boolean)
boolean
as.numeric(boolean)
num<100
num<=100
num>100
num==10
num!=12
string <- "Hello world"
string == "Hello world"
getwd()
sqrt(12)
?rm
?sqrt
data()
data("cars")
data("cars93")
data(cars93)
install.packages()
install.packages()
summary(cars)
x <- 10
y <- 8
z <- -3
x+y+x
z
x+y+z
x-y
x*z
y/x
x^3
x^2
x**2
pi
round(pi)
round(pi, 2)
floor(pi)
ceiling(pi)
cos(pi)
cos(pi*2)
cos(pi*0.5)
sin(pi)
tan(.5)
z
abs(z)
sqrt(abs(z))
x^(1/2)
x^1/2
log(x)
log10(x)
exp(1)
factorial(4)
x <- 15
vector <- c(1,2,3,4,5)
vec <- c(1,2,3,4,5,)
vec <- c(1,2,3,4,5)
vec
class(vec)
vec <- 1:5
1:5
2:10
1.5:5.5
vec <- 10:15
vec
vec[2]
vec[1:4]
vec[-1]
vec[-3]
vec[-(1:3)]
x <- c(1,2,3)
y <- c(100,150,300)
z <- -15
vec <- c(x,y,z)
vec
vec <- c(x,y,-3:-1)
vec
length(vec)
vec <- c("hello", "hi", "sup")
vec
char_vec <- c("hello", "hi", "sup")
char_vec
boo_vec <- c(T, F, T, F)
boo_vec
vec <- 1:5
vec^2
vec + 10
seq(1, 10, 0.5)
seq(1, 20, by= pi)
seq(from=2, to=16, by=1)
seq(2, 16, 2)
seq(5) == (1:5)
all seq(5) == 1:5
allseq(5) == 1:5
all(seq(5)) == 1:5
!all(seq(5)) == 1:5
all(seq(5) == 1:5)
!all(seq(5) == 1:5)
rep(1,4)
rep((1,2,3,4), 3)
rep(c(1,2,3,4), 3)
rep((1:4), 3)
sum(1,2,3)
min(1,2,3
sum(1,2,3)
min(1,2,3)
max(20, 140, 60, 80, 100)
range(20, 140, 60, 80, 100)
mean(20, 140, 60, 80, 100)
median(20, 140, 60, 80, 100)
var(20, 140, 60, 80, 100)
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
colnames(A)<-c("Fairbanks","San Francisco","Chicago")
source("~/.active-rstudio-document")
A<-matrix(c(30,32,31,27,36,72,60,78,67,71,55,57,56,55,49),ncol = 3)
colnames(A)<-c("Fairbanks","San Francisco","Chicago")
rownames(A)<-paste("3/",12:16,sep='')
A
B<-matrix(c(88,85,83,81,78,62,61,54,60,65,90,92,91,89,90)),ncol = 3)
colames(B)<-c("Los Angeles","Seattle","Honolulu")
rownames(B)<-paste("3/",12:16,sep ='')
B<-matrix(c(88,85,83,81,78,62,61,54,60,65,90,92,91,89,90)),ncol = 3)
colames(B)<-c("Los Angeles","Seattle","Honolulu")
rownames(B)<-paste("3/",12:16,sep ='')
B<-matrix(c(88,85,83,81,78,62,61,54,60,65,90,92,91,89,90)),ncol = 3)
B<-matrix(c(88,85,83,81,78,62,61,54,60,65,90,92,91,89,90)),ncol = 3)
colames(B)<-c("Los Angeles","Seattle","Honolulu")
rownames(B)<-paste("3/",12:16,sep='')
B<-matrix(c(88,85,83,81,78,62,61,54,60,65,90,92,91,89,90)),ncol = 3)
colnames(B)<-c("Los Angeles","Seattle","Honolulu")
rownames(B)<-paste("3/",12:16,sep='')
B<-matrix(c(88,85,83,81,78,62,61,54,60,65,90,92,91,89,90)),ncol = 3)
colnames(B)<-c("Los Angeles","Seattle","Honolulu")
rownames(B)<-paste("3/",12:16,sep="")
B<-matrix(c(88,85,83,81,78,62,61,54,60,65,90,92,91,89,90)),ncol = 3)
colnames(B)<-c("Los Angeles","Seattle","Honolulu")
rownames(B)<-paste("3/",12:16,sep='')
B<-matrix(c(88,85,83,81,78,62,61,54,60,65,90,92,91,89,90),ncol = 3)
colnames(B)<-c("Los Angeles","Seattle","Honolulu")
rownames(B)<-paste("3/",12:16,sep='')
A
B
cbind(A,B)
rbind(A,B)
new_data<-matrix(c(37,70,50,77,63,91),nrow = 1)
rownames(new_data)<-"3/17"
colnames(new_data)<-c(colnames(A),colnames(B))
new_data
rbind(cbind(A,b),new_data)
rbind(cbind(A,B),new_data)
old_data<-cbind(A,B)
rbind(old_data,new_data)
full_data<-rbind(old_data,new_data)
c(full_data)
length(c(full_data))
nrow(full_data)*ncol(full_data)
source("~/.active-rstudio-document")
temp_data
min(temp_data)
max(temp_data)
sd(temp_data)
rowMeans(temp_data)
colMeans(temp_data)
apply(temp_data,2,FUN = sd)
apply(temp_data,2,sd)
cor(temp_data)
table(temp_data)
summary(temp_data)
summary(t(temp_data))
install.packages("ggvis")
library("ggvis")
setwd("C:/Users/HP/Desktop/University of Salford/ASDV-Principles of Data Science/Assignment/Suicide data")
library(tidyverse)
library(psych) #gives us all our descriptive parameters
library(modeest)
library(caret)
library(corrplot)
library(car
##DESCRIPTIVE STATISTICS
##load data set
suicide_data <- read.csv('Suicide_Data_R1.csv')
suicide_data %>% head()
view(suicide_data)
##DESCRIPTIVE STATISTICS
##load data set
suicide_data <- read.csv('Suicide_Data_R1.csv')
suicide_data %>% head()
view(suicide_data)
##checking columns specifications
glimpse(suicide_data)
##checking missing observations in the columns
colSums(is.na(suicide_data))
##Descriptive Statistic Analysis
##excluding country name and year from the analysis
variables <- colnames(suicide_data[, -c(1,2)])
describe(suicide_data[variables])
descriptive_stat <- function(x, na.omit=F){
if (na.omit)
x <- x[!is.na(x)] ## dropping the missing observations
if (length(mfv(x)) != 1){
mod <- NA
}else{
mod <- mfv(x)
}
n <- length(x)
m <- mean(x) ## the mean
s <- sd(x)
me <- median(x)
skew <- sum((x-m)^3/s^3)/n
kurt <- sum((x-m)^4/s^4)/n - 3
return(c(n=n, mean=m, median=me, mode=mod, stdev=s,
skewness=skew, kurtosis=kurt))
}
sapply(suicide_data[variables], descriptive_stat)
##Descriptive analysis for each country
country_des <- function(x) sapply(x, descriptive_stat)
by(suicide_data[variables], suicide_data$Country, country_des)
##CORRELATION ANALYSIS
#using the inbuilt R functions and rounding it up to 2 dp
round(cor(suicide_data[variables]), 2)
#checking if the correlation is significant using the Psych package
#this means that the correlation is not just a random occurrence
#complete removes missing observations
#N.B any value less than 0.05 is significant
corr.test(suicide_data[variables], use = 'complete')
##defining the correlation matrix
M= cor(suicide_data[variables])
#usig this data for reg would not make the model work cos its a perfect cor
#hence, we drop variables that are 80% correlated
#defining h-cor=high correlation values
h_cor<-findCorrelation(cor(suicide_data[variables][,-1]), cutoff = 0.8)
## selecting uncorrelated independent var
un_correlated_vars<- suicide_data[variables][,-1][,-c(h_cor)]
##adding the dependent variable to the uncorrelated variables
df_regression <- cbind(suicide_data['X..Pop.growth'], un_correlated_vars)
df_regression  #new data for regression
linear_model <- lm(X..Pop.growth ~., data =df_regression)
summary(linear_model)
##t-test and ANOVA are used forcomparative analysis
#for 2 groups, use t-test, for more than 2, use ANOVA
library(tidyverse)
suicide_data <- read.csv('Suicide_Data_R1.csv')
#getting the unique countries
unique(suicide_data$Country)
##dividing the countries into developed and underdeveloped class
developed_class <- c('France', 'Germany', 'Japan', 'United Kingdom', 'United States')
underdeveloped_class <- c('Afghanistan', 'Angola', 'Bangladesh', 'Ethiopia', 'Sudan')
class <- c()
for (country in unique(suicide_data$Country)) {
if (country %in% developed_class){
class <- c(class, rep('dev', 10))
} else {
class <- c(class, rep('underdev', 10))
}
}
class
##adding the new classification column to the data
suicide_data$classification <- class
View(suicide_data)
##testing assumptions of equal variance-there are diff test, this is the most common
##this should be done before the t-test
bartlett.test(suicide_data$Suicide.Rate..per.100k.Total.Pop. ~ suicide_data$classification)
##T-test (Independent sample t-test)
#dependent variable is the numeric var we are comparing-the suicide rate, the independent var is the
#classification we just did
class_test <- t.test(suicide_data$Suicide.Rate..per.100k.Total.Pop. ~ suicide_data$classification)
class_test
##using analysis of variance test
fit<-aov(suicide_data$Suicide.Rate..per.100k.Total.Pop. ~ suicide_data$classification)
summary(fit)
